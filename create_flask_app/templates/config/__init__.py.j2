import os
from pathlib import Path

class Config:
    """基础配置类"""
    # 基础配置
    SECRET_KEY = os.getenv('SECRET_KEY', '{{ secret_key }}')
    BASE_DIR = Path(__file__).resolve().parent.parent.parent

    # SQLAlchemy配置
    {% if database == 'sqlite' %}
    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL',
                                      f"sqlite:///{BASE_DIR/'app.db'}")
    {% elif database == 'postgresql' %}
    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL',
                                      'postgresql://localhost/{{ project_name }}')
    {% elif database == 'mysql' %}
    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL',
                                      'mysql://root:password@localhost/{{ project_name }}')
    {% else %}
    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL',
                                      f"sqlite:///{BASE_DIR/'app.db'}")
    {% endif %}
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    {% if auth_enabled %}
    # JWT配置
    JWT_SECRET_KEY = os.getenv('JWT_SECRET_KEY', SECRET_KEY)
    JWT_ACCESS_TOKEN_EXPIRES = 3600  # 1小时
    {% endif %}

    @staticmethod
    def init_app(app):
        """初始化应用"""
        pass

class DevelopmentConfig(Config):
    """开发环境配置"""
    DEBUG = True
    {% if database == 'sqlite' %}
    SQLALCHEMY_DATABASE_URI = os.getenv('DEV_DATABASE_URL',
                                      f"sqlite:///{Config.BASE_DIR/'dev.db'}")
    {% elif database == 'postgresql' %}
    SQLALCHEMY_DATABASE_URI = os.getenv('DEV_DATABASE_URL',
                                      'postgresql://localhost/{{ project_name }}_dev')
    {% elif database == 'mysql' %}
    SQLALCHEMY_DATABASE_URI = os.getenv('DEV_DATABASE_URL',
                                      'mysql://root:password@localhost/{{ project_name }}_dev')
    {% endif %}

class TestingConfig(Config):
    """测试环境配置"""
    TESTING = True
    {% if database == 'sqlite' %}
    SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'
    {% elif database == 'postgresql' %}
    SQLALCHEMY_DATABASE_URI = os.getenv('TEST_DATABASE_URL',
                                      'postgresql://localhost/{{ project_name }}_test')
    {% elif database == 'mysql' %}
    SQLALCHEMY_DATABASE_URI = os.getenv('TEST_DATABASE_URL',
                                      'mysql://root:password@localhost/{{ project_name }}_test')
    {% endif %}
    WTF_CSRF_ENABLED = False

class ProductionConfig(Config):
    """生产环境配置"""
    @classmethod
    def init_app(cls, app):
        Config.init_app(app)

        # 日志配置
        import logging
        from logging.handlers import RotatingFileHandler
        
        handler = RotatingFileHandler('logs/{{ project_name }}.log',
                                     maxBytes=10000000,
                                     backupCount=10)
        handler.setFormatter(logging.Formatter(
            '%(asctime)s %(levelname)s: %(message)s '
            '[in %(pathname)s:%(lineno)d]'
        ))
        handler.setLevel(logging.INFO)
        app.logger.addHandler(handler)

config = {
    'development': DevelopmentConfig,
    'testing': TestingConfig,
    'production': ProductionConfig,
    'default': DevelopmentConfig
}