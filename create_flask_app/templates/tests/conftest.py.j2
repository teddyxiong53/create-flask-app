import os
import tempfile
import pytest
from app import create_app, db
{% if auth_enabled %}
from app.models.user import User{% endif %}

@pytest.fixture
def app():
    """创建应用实例"""
    # 创建临时数据库文件
    db_fd, db_path = tempfile.mkstemp()
    
    # 创建测试配置
    test_config = {
        'TESTING': True,
        'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',
        'WTF_CSRF_ENABLED': False
    }
    
    # 创建应用实例
    app = create_app('testing')
    app.config.update(test_config)
    
    # 创建数据库表
    with app.app_context():
        db.create_all()
    
    yield app
    
    # 清理
    os.close(db_fd)
    os.unlink(db_path)

@pytest.fixture
def client(app):
    """创建测试客户端"""
    return app.test_client()

@pytest.fixture
def runner(app):
    """创建CLI测试运行器"""
    return app.test_cli_runner()

{% if auth_enabled %}
@pytest.fixture
def test_user(app):
    """创建测试用户"""
    user = User(
        username='test',
        email='test@example.com'
    )
    user.password = 'password123'
    
    with app.app_context():
        db.session.add(user)
        db.session.commit()
        
    return user

@pytest.fixture
def auth_headers(test_user, client):
    """获取认证头信息"""
    response = client.post('/api/v1/auth/login', json={
        'email': test_user.email,
        'password': 'password123'
    })
    token = response.json['access_token']
    return {'Authorization': f'Bearer {token}'}
{% endif %}

@pytest.fixture
def app_context(app):
    """创建应用上下文"""
    with app.app_context() as ctx:
        yield ctx