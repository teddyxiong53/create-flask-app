# {{ project_name }}

## 项目简介

这是一个使用Flask构建的Web应用程序。{% if api_enabled %}它提供了REST API接口，{% endif %}{% if auth_enabled %}支持用户认证，{% endif %}{% if admin_enabled %}并包含管理界面。{% endif %}

## 功能特性

- 基于Flask 2.x构建
- 使用SQLAlchemy进行数据库操作
{% if database == 'postgresql' %}- PostgreSQL数据库支持
{% elif database == 'mysql' %}- MySQL数据库支持
{% else %}- SQLite数据库支持
{% endif %}
{% if auth_enabled %}- 用户认证和授权系统
{% endif %}
{% if api_enabled %}- RESTful API接口
- Swagger API文档
{% endif %}
{% if admin_enabled %}- 管理员后台界面
{% endif %}

## 快速开始

### 环境要求

- Python 3.8+
{% if database == 'postgresql' %}- PostgreSQL
{% elif database == 'mysql' %}- MySQL
{% endif %}
- pip

### 安装步骤

1. 克隆项目到本地：

```bash
git clone <repository-url>
cd {{ project_name }}
```

2. 创建并激活虚拟环境：

```bash
python -m venv .venv
source .venv/bin/activate  # Windows: .venv\Scripts\activate
```

3. 安装依赖：

```bash
pip install -r requirements/dev.txt
```

4. 设置环境变量：

```bash
cp .env.example .env
# 编辑.env文件，设置必要的环境变量
```

5. 初始化数据库：

```bash
flask db upgrade
```

6. 运行开发服务器：

```bash
flask run --debug
```

访问 http://localhost:5000 查看应用。

### 使用Docker

1. 构建并启动容器：

```bash
docker-compose up --build
```

2. 初始化数据库：

```bash
docker-compose exec web flask db upgrade
```

## 项目结构

```
{{ project_name }}/
├── app/                    # 应用主目录
│   ├── __init__.py        # 应用工厂
│   ├── models/            # 数据模型
│   ├── routes.py          # 视图路由
{% if auth_enabled %}│   ├── auth.py            # 认证模块
{% endif %}{% if api_enabled %}│   ├── api.py             # API模块
{% endif %}│   ├── templates/         # 模板文件
│   └── static/            # 静态文件
├── tests/                 # 测试用例
├── requirements/          # 依赖文件
└── wsgi.py               # WSGI入口
```

## 开发指南

### 运行测试

```bash
pytests
```

### 代码格式化

```bash
black .
isort .
```

### 类型检查

```bash
mypy .
```

## 部署

### 使用Gunicorn

```bash
gunicorn -w 4 -b 0.0.0.0:5000 wsgi:app
```

### 使用Docker

```bash
docker-compose -f docker-compose.prod.yml up -d
```

## API文档

{% if api_enabled %}
API文档可在运行应用后通过访问 http://localhost:5000/api/ 获取。

主要接口：
- `GET /api/v1/health`: 健康检查
- `POST /api/v1/auth/login`: 用户登录
- `GET /api/v1/users/me`: 获取当前用户信息
{% endif %}

## 贡献指南

1. Fork 项目
2. 创建特性分支 (`git checkout -b feature/AmazingFeature`)
3. 提交更改 (`git commit -m 'Add some AmazingFeature'`)
4. 推送到分支 (`git push origin feature/AmazingFeature`)
5. 创建Pull Request

## 许可证

[MIT](LICENSE)